---
- name: Configure SSL for apache
  hosts: node1
  tags: 
  - apache
  become: True
  tasks:
  - name: Create directory to hold key and cert
    ansible.builtin.file:
      path: /var/webapp
      state: directory

  - name: Create private key (RSA, 4096 bits)
    community.crypto.openssl_privatekey:
      path: /var/webapp/certificate.key

  - name: Create simple self-signed certificate
    community.crypto.x509_certificate:
      path: /var/webapp/certificate.cert
      privatekey_path: /var/webapp/certificate.key
      provider: selfsigned

  - name: change context on key file
    community.general.sefcontext:
      target: /var/webapp/certificate.key
      setype: cert_t

  - name: change context on cert file
    community.general.sefcontext:
      target: /var/webapp/certificate.cert
      setype: cert_t
    
  - name: Apply new SELinux file context to filesystem
    ansible.builtin.command: restorecon -irv /var/webapp/

  - name: Install mod_ssl 
    ansible.builtin.dnf:
      name: mod_ssl
      state: latest
    notify: restart apache

  - name: edit the ssl configuration file to point to the generated certificate
    ansible.builtin.lineinfile:
      path: /etc/httpd/conf.d/ssl.conf
      regexp: '^SSLCertificateFile'
      line: SSLCertificateFile /var/webapp/certificate.cert
    notify: restart apache

  - name: edit the ssl configuration file to point to the generated key
    ansible.builtin.lineinfile:
      path: /etc/httpd/conf.d/ssl.conf
      regexp: '^SSLCertificateKeyFile'
      line: SSLCertificateKeyFile /var/webapp/certificate.key
    notify: restart apache
    
  - name: ensure that apache is running and enabled
    ansible.builtin.service:
      name: httpd
      state: started
      enabled: True   

  handlers:
  - name: restart apache
    ansible.builtin.service:
      name: httpd
      state: restarted
      enabled: True   

- name: Configure SSL on mysql
  hosts: node2
  tags: 
  - mysql
  become: True
  tasks:
  - name: Read the generated password
    ansible.builtin.slurp:
      src: /tmp/mysql-password
    register: mysql_password

  - name: Setting host facts using complex arguments
    ansible.builtin.set_fact:
      webapp_password: "{{ mysql_password['content'] | b64decode | trim }}"
      
  - name: Create directory to hold key and cert
    ansible.builtin.file:
      path: /etc/pki/tls/private
      state: directory

  - name: Create the root certificate authority key
    community.crypto.openssl_privatekey:
      path: /etc/pki/tls/private/CA_key.pem
    register: ca_key

  - name: Generate an OpenSSL Certificate Signing Request
    community.crypto.openssl_csr:
      path: /etc/pki/tls/private/CA.csr
      privatekey_path: "{{ ca_key.filename }}"
      common_name: "my-ca"
    register: ca_csr

  - name: Sign the CA CSR
    community.crypto.x509_certificate:
      path: /etc/pki/tls/private/CA.cert
      privatekey_path: "{{ ca_key.filename }}"
      csr_path:  "{{ ca_csr.filename }}"
      provider: selfsigned
    register: ca_crt

  - name: Create the host CSR signing key
    community.crypto.openssl_privatekey:
      path: /etc/pki/tls/private/example_com_host_key.pem
    register: example_com_key

  - name: Generate an OpenSSL Certificate Signing Request
    community.crypto.openssl_csr:
      path: /etc/pki/tls/private/example_com.csr
      privatekey_path: "{{ example_com_key.filename }}"
      common_name: "example.com"
    register: example_com_csr

  - name: Sign thethe CSR for the LDAP server
    community.crypto.x509_certificate:
      path: /etc/pki/tls/private/example_com.cert
      csr_path:  "{{ example_com_csr.filename }}"
      provider: ownca
      ownca_path: "{{ ca_crt.filename }}"
      ownca_privatekey_path: "{{ ca_key.filename }}"
    register: ca_crt

  - name: Change file ownership, group and permissions
    ansible.builtin.file:
      path: "{{ item }}"
      owner: mysql
      group: mysql
      mode: '660'
    loop:
    - /etc/pki/tls/private/CA_key.pem
    - /etc/pki/tls/private/CA.csr
    - /etc/pki/tls/private/CA.cert
    - /etc/pki/tls/private/example_com_host_key.pem
    - /etc/pki/tls/private/example_com.csr
    - /etc/pki/tls/private/example_com.cert

  # - name: change context on files
  #   community.general.sefcontext:
  #     target: "{{ item }}"
  #     setype: cert_t
  #   loop:
  #   - /etc/pki/tls/private/CA_key.pem
  #   - /etc/pki/tls/private/CA.csr
  #   - /etc/pki/tls/private/CA.cert
  #   - /etc/pki/tls/private/example_com_host_key.pem
  #   - /etc/pki/tls/private/example_com.csr
  #   - /etc/pki/tls/private/example_com.cert

  # - name: Apply new SELinux file context to filesystem
  #   ansible.builtin.command: restorecon -irv /etc/pki/tls/private/

  - name: Configure custom port and remote listening
    ansible.builtin.blockinfile:
      path: /etc/my.cnf.d/mariadb-server.cnf
      insertafter: "[mysqld]"
      block: |
        #BIND ADDRESS AND PORT
        bind-address=0.0.0.0
        port=3389
        #SSL CONFIG
        ssl-ca=/etc/pki/tls/private/CA.cert
        ssl-cert=/etc/pki/tls/private/example_com.cert
        ssl-key=/etc/pki/tls/private/example_com_host_key.pem
    notify:
    - restart mysql
    - check SSL

  handlers:
  
  - name: restart mysql
    ansible.builtin.service:
      name: mariadb
      state: restarted
      enabled: True   

  - name: check SSL
    community.mysql.mysql_query:
      login_host: localhost
      login_port: 3389
      login_user: webapp
      login_password: "{{ webapp_password }}"
      check_hostname: true
      query:
      - SHOW GLOBAL VARIABLES LIKE '%ssl%';
      - SHOW SESSION STATUS LIKE 'Ssl_cipher';
